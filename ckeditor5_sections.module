<?php

/**
 * @file
 * Contains hook implementations for the ckeditor5_sections module.
 */

use Drupal\ckeditor5_sections\DocumentSection;
use Drupal\ckeditor5_sections\Form\SectionsMediaLibraryUploadForm;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\Filesystem\Filesystem;

/**
 * Implements hook_ibrary_info_alter().
 */
function ckeditor5_sections_library_info_alter(&$libraries, $extension) {
  if ($extension === 'ckeditor5_sections') {
    /** @var \Drupal\ckeditor5_sections\SectionsCollector $collector */
    $collector = \Drupal::service('ckeditor5_sections.sections_collector');
    $stylesheets = $collector->getStyleSheets();
    foreach ($stylesheets as $stylesheet) {
      $fileSystem = new Filesystem();
      $relative = $fileSystem->makePathRelative(dirname($stylesheet), drupal_get_path('module', 'ckeditor5_sections')) . basename($stylesheet);
      $libraries['sections']['css']['base'][$relative] = [];
    }
    // Add CKEditor5 inspector if enabled in e.g. development.settings.yml.
    if (\Drupal::getContainer()->hasParameter('ckeditor5_sections.enable_inspector') && \Drupal::getContainer()->getParameter('ckeditor5_sections.enable_inspector')) {
      /** @var \Drupal\Core\Extension\ModuleHandler $module_handler */
      $module_handler = \Drupal::service('module_handler');
      $module_path = $module_handler->getModule('ckeditor5_sections')->getPath();
      $path_to_inspector_js = 'editor/node_modules/@ckeditor/ckeditor5-inspector/build/inspector.js';
      // Ensure yarn has been run and the inspector dependency has retrieved.
      if (file_exists(DRUPAL_ROOT . '/' . $module_path . '/' . $path_to_inspector_js)) {
        $libraries['editor_build']['js']['editor/node_modules/@ckeditor/ckeditor5-inspector/build/inspector.js'] = ['preprocess' => FALSE];
      }
      else {
        \Drupal::messenger()->addWarning(
          t('CKEditor5 inspector is enabled but the javascript file (%path_to_inspector_js) could not be loaded, Make sure to run `yarn install` in the editor/ subfolder of the ckeditor5_sections-module and run `drush cr` again.', [
            '%path_to_inspector_js' => $module_path . '/' . $path_to_inspector_js,
          ]));
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function ckeditor5_sections_views_data_alter(&$data) {
  // Use custom media select plugin.
  $data['media']['media_library_select_form']['field']['id'] = 'sections_media_library_select_form';

  $data['node_field_data']['node_library_select_form'] = $data['media']['media_library_select_form'];
  $data['node_field_data']['node_library_select_form']['title'] = t('Select Node');
  $data['node_field_data']['node_library_select_form']['real field'] = 'nid';
}

/**
 * Implements hook_module_implements_alter().
 */
function ckeditor5_sections_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'media_source_info_alter':
      $group = $implementations['ckeditor5_sections'];
      unset($implementations['ckeditor5_sections']);
      $implementations['ckeditor5_sections'] = $group;
      break;

    default:
      break;
  }
}

/**
 * Implements hook_media_source_info_alter().
 */
function ckeditor5_sections_media_source_info_alter(array &$sources) {
  $sources['audio_file']['forms']['media_library_add'] = SectionsMediaLibraryUploadForm::class;
  $sources['file']['forms']['media_library_add'] = SectionsMediaLibraryUploadForm::class;
  $sources['image']['forms']['media_library_add'] = SectionsMediaLibraryUploadForm::class;
  $sources['video_file']['forms']['media_library_add'] = SectionsMediaLibraryUploadForm::class;
}

/**
 * Implements hook_page_attachments().
 */
function ckeditor5_sections_page_attachments(array &$attachments) {
  // TODO: Allow loading of user defined libraries.
  $attachments['#attached']['library'][] = 'ckeditor5_sections/editor_components';
  $attachments['#attached']['library'][] = 'ckeditor5_sections/sections';
}

/**
 * Implements hook_ckeditor5_sections_editor_settings_alter().
 */
function ckeditor5_sections_ckeditor5_sections_editor_settings_alter(array &$settings) {
  /** @var \Drupal\ckeditor5_sections\MentionProviderPluginManager $mention_provider */
  $mention_provider = \Drupal::service('plugin.manager.ckeditor5_sections.mention_provider');
  $definitions = $mention_provider->getDefinitions();

  $feeds = [];
  foreach ($definitions as $id => $definition) {
    /** @var \Drupal\ckeditor5_sections\MentionProvider\MentionProviderInterface $plugin */
    $plugin = $mention_provider->createInstance($id);
    $feeds[] = $plugin->getMentionFeedDefinition();
  }
  $settings['mention']['feeds'] = $feeds;
}

/**
 * Implements hook_section_type_definitions_alter().
 */
function ckeditor5_sections_section_type_definitions_alter(&$definitions) {
  foreach (array_keys($definitions) as $key) {
    $type = &$definitions[$key];
    if (isset($type['fields']) && array_key_exists('data-media-type', $type['fields'])) {
      $typeDef = $type['fields']['data-media-type']['default'];
      if (strpos($typeDef, ':') !== FALSE) {
        list($entityType, $bundle) = explode(':', $typeDef);
      }
      else {
        $entityType = $typeDef;
      }
      $type['fields']['entity'] = [
        'label' => ucfirst($entityType) . ' Entity',
        'type' => 'entity:media',
      ];
    }
  }
}

/**
 * Implements hook_section_data_alter().
 */
function ckeditor5_sections_section_data_alter(&$data) {
  // TODO: Optimize this by loading multiple entities at once.
  ckeditor5_sections_attach_entities($data);
}

function ckeditor5_sections_attach_entities(DocumentSection $section) {
  $type = $section->get('data-media-type');
  $uuid = $section->get('data-media-uuid');
  if ($type && $uuid) {
    $entityType = explode(':', $type)[0];
    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
    $entityTypeManager = \Drupal::service('entity_type.manager');
    $definitions = $entityTypeManager->getDefinitions();
    if (empty($definitions[$entityType])) {
      $entityType = 'media';
    }
    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository */
    $entityRepository = \Drupal::service('entity.repository');
    $section->set('entity', $entityRepository->loadEntityByUuid($entityType, $uuid));
  }

  foreach ($section->getFields() as $field) {
    if ($field instanceof DocumentSection) {
      ckeditor5_sections_attach_entities($field);
    }
    if (is_array($field)) {
      array_walk($field, 'ckeditor5_sections_attach_entities');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the link editor.
 */
function ckeditor5_sections_form_editor_link_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form_state->getUserInput()['editor_object'])) {
    $input = $form_state->getUserInput()['editor_object'];
  }
  else {
    // Retrieve the link element's attributes from form state.
    $input = $form_state->get('link_element') ?: [];
  }

  // Set a specific linkit profile if the input element has one defined.
  if (!empty($input['data-linkit-profile']) && !empty($form['attributes']['href'])) {
    $form['attributes']['href']['#autocomplete_route_parameters']['linkit_profile_id'] = $input['data-linkit-profile'];
  }
}
